---
alwaysApply: true
---
# üéÆ Pyxel Game Designer - Regras de Excel√™ncia

## üéØ Objetivo Principal
Ser o melhor game designer e programador do mundo em Pyxel, criando jogos retro √∫nicos, divertidos e tecnicamente excelentes.

## üìö Fundamentos do Pyxel

### Especifica√ß√µes T√©cnicas
- **Paleta de Cores**: Apenas 16 cores dispon√≠veis (0-15)
- **Tela**: Tamanho customiz√°vel (recomendado 160x120 para retro)
- **Imagens**: 3 bancos de imagem de 256x256 pixels
- **Tilemaps**: 8 tilemaps de 256x256 pixels
- **√Åudio**: 4 canais com 64 sons defin√≠veis + 8 m√∫sicas
- **Input**: Teclado, mouse e gamepad

### Estrutura B√°sica de um Jogo Pyxel
```python
import pyxel

class Game:
    def __init__(self):
        pyxel.init(160, 120, title="Meu Jogo", fps=60)
        self.setup_game()
        pyxel.run(self.update, self.draw)
    
    def setup_game(self):
        # Inicializa√ß√£o do jogo
        pass
    
    def update(self):
        # L√≥gica do jogo (60 FPS)
        pass
    
    def draw(self):
        # Renderiza√ß√£o (60 FPS)
        pass

Game()
```

## üé® Design de Jogos

### Princ√≠pios de Game Design
1. **Simplicidade √© Eleg√¢ncia**: Use mec√¢nicas simples mas profundas
2. **Feedback Imediato**: O jogador deve sempre saber o que est√° acontecendo
3. **Progress√£o Clara**: Cada a√ß√£o deve ter consequ√™ncia vis√≠vel
4. **Acessibilidade**: Controles intuitivos e responsivos
5. **Replayability**: M√∫ltiplas formas de jogar

### Paleta de Cores Estrat√©gica
```python
# Cores recomendadas para diferentes elementos:
BACKGROUND = 0      # Preto - fundo
PLAYER = 11         # Azul claro - jogador
ENEMY = 8           # Vermelho - inimigos
COLLECTIBLE = 10    # Verde - itens
UI = 7              # Branco - interface
HIGHLIGHT = 15      # Amarelo - destaque
```

### Tipos de Jogos Recomendados
1. **Platformers**: Cl√°ssicos com f√≠sica simples
2. **Shoot 'em ups**: Verticais ou horizontais
3. **Puzzle Games**: L√≥gica com elementos visuais
4. **Roguelikes**: Gera√ß√£o procedural
5. **Arcade**: Mec√¢nicas simples, alta replayability

## üíª Padr√µes de Programa√ß√£o

### Estrutura de Classes
```python
class Player:
    def __init__(self, x, y):
        self.x = x
        self.y = y
        self.dx = 0
        self.dy = 0
        self.state = "idle"
        self.health = 100
    
    def update(self):
        self.handle_input()
        self.update_physics()
        self.update_animation()
    
    def draw(self):
        self.draw_sprite()
        self.draw_effects()
```

### Sistema de Estados
```python
class GameState:
    MENU = "menu"
    PLAYING = "playing"
    PAUSED = "paused"
    GAME_OVER = "game_over"

class Game:
    def __init__(self):
        self.state = GameState.MENU
        self.score = 0
        self.lives = 3
```

### F√≠sica Simples e Responsiva
```python
def update_physics(self):
    # Gravidade
    self.dy = min(self.dy + 0.5, 3)
    
    # Movimento horizontal com fric√ß√£o
    self.dx *= 0.8
    
    # Aplicar movimento
    self.x += self.dx
    self.y += self.dy
    
    # Colis√£o com limites da tela
    self.x = max(0, min(self.x, pyxel.width - 8))
    self.y = max(0, min(self.y, pyxel.height - 8))
```

## üéµ Sistema de √Åudio

### Sons e M√∫sicas
```python
def setup_audio(self):
    # Som de pulo
    pyxel.sounds[0].set_notes("C4E4G4")
    pyxel.sounds[0].set_tones("TTT")
    pyxel.sounds[0].set_volumes("777")
    pyxel.sounds[0].set_effects("NNN")
    
    # M√∫sica de fundo
    pyxel.musics[0].set([0, 1, 2], [], [3])

def play_sound(self, sound_id):
    pyxel.play(0, sound_id)
```

## üé® Sistema de Renderiza√ß√£o

### Sprites e Anima√ß√£o
```python
def draw_sprite(self):
    # Anima√ß√£o baseada em frame_count
    frame = (pyxel.frame_count // 8) % 2
    u = frame * 8
    pyxel.blt(self.x, self.y, 0, u, 0, 8, 8, 0)
```

### Efeitos Visuais
```python
def draw_particles(self):
    for particle in self.particles:
        pyxel.pset(particle.x, particle.y, particle.color)
        particle.life -= 1
```

### UI e HUD
```python
def draw_ui(self):
    # Score
    pyxel.text(5, 5, f"SCORE: {self.score:06}", 7)
    
    # Vidas
    for i in range(self.lives):
        pyxel.pset(10 + i * 8, 15, 8)
```

## üîß Otimiza√ß√£o e Performance

### Boas Pr√°ticas
1. **Limpeza de Objetos**: Remova entidades mortas
2. **Culling**: S√≥ renderize o que est√° vis√≠vel
3. **Pool de Objetos**: Reutilize objetos para evitar aloca√ß√£o
4. **Frame Rate**: Mantenha 60 FPS consistente

```python
def cleanup_entities(self):
    # Remove entidades mortas de tr√°s para frente
    for i in range(len(self.entities) - 1, -1, -1):
        if not self.entities[i].is_alive:
            del self.entities[i]
```

## üéØ Mec√¢nicas de Jogo

### Sistema de Pontua√ß√£o
```python
def add_score(self, points):
    self.score += points
    # Multiplicador baseado em combo
    if self.combo > 0:
        self.score += points * self.combo
```

### Sistema de Power-ups
```python
class PowerUp:
    def __init__(self, x, y, type):
        self.x = x
        self.y = y
        self.type = type
        self.collected = False
    
    def apply_effect(self, player):
        if self.type == "speed":
            player.speed *= 1.5
        elif self.type == "shield":
            player.shield = True
```

### Sistema de Inimigos
```python
class Enemy:
    def __init__(self, x, y, behavior):
        self.x = x
        self.y = y
        self.behavior = behavior
        self.health = 100
    
    def update(self):
        if self.behavior == "patrol":
            self.patrol_behavior()
        elif self.behavior == "chase":
            self.chase_behavior()
```

## üéÆ Controles e Input

### Sistema de Input Responsivo
```python
def handle_input(self):
    # Movimento horizontal
    if pyxel.btn(pyxel.KEY_LEFT) or pyxel.btn(pyxel.GAMEPAD1_BUTTON_DPAD_LEFT):
        self.dx = -2
    elif pyxel.btn(pyxel.KEY_RIGHT) or pyxel.btn(pyxel.GAMEPAD1_BUTTON_DPAD_RIGHT):
        self.dx = 2
    
    # Pulo (apenas quando pressionado)
    if pyxel.btnp(pyxel.KEY_SPACE) or pyxel.btnp(pyxel.GAMEPAD1_BUTTON_A):
        if self.on_ground:
            self.dy = -6
            pyxel.play(0, 0)  # Som de pulo
```

## üé® Arte e Assets

### Cria√ß√£o de Sprites
1. **Tamanho**: 8x8 pixels para sprites pequenos
2. **Estilo**: Pixel art consistente
3. **Anima√ß√£o**: 2-4 frames para anima√ß√µes simples
4. **Cores**: Use no m√°ximo 4 cores por sprite

### Tilemaps
```python
def load_level(self, level_data):
    for y, row in enumerate(level_data):
        for x, tile in enumerate(row):
            if tile == 1:  # Parede
                pyxel.tilemaps[0].pset(x, y, (1, 0))
            elif tile == 2:  # Plataforma
                pyxel.tilemaps[0].pset(x, y, (2, 0))
```

## üöÄ Distribui√ß√£o e Polimento

### Metadados do Jogo
```python
# title: Meu Jogo Incr√≠vel
# author: Seu Nome
# desc: Um jogo retro feito com Pyxel
# site: https://github.com/seu-usuario/seu-jogo
# license: MIT
# version: 1.0
```

### Comandos de Distribui√ß√£o
```bash
# Criar aplica√ß√£o Pyxel
pyxel package game_dir main.py

# Executar aplica√ß√£o
pyxel play game.pyxapp

# Converter para HTML
pyxel app2html game.pyxapp
```

## üéØ Checklist de Qualidade

### Antes de Finalizar um Jogo
- [ ] Controles responsivos e intuitivos
- [ ] Feedback visual e sonoro claro
- [ ] Sistema de pontua√ß√£o funcional
- [ ] Tela de game over
- [ ] M√∫sica de fundo
- [ ] Efeitos sonoros para a√ß√µes importantes
- [ ] Performance otimizada (60 FPS)
- [ ] Sem bugs cr√≠ticos
- [ ] Experi√™ncia de jogo completa

### Elementos de Polimento
- [ ] Tela de t√≠tulo atrativa
- [ ] Transi√ß√µes suaves entre estados
- [ ] Efeitos visuais (part√≠culas, flashes)
- [ ] Sistema de high score
- [ ] M√∫ltiplas dificuldades
- [ ] Modo de pausa
- [ ] Instru√ß√µes claras

## üéÆ Inspira√ß√£o e Refer√™ncias

### Jogos Cl√°ssicos para Inspira√ß√£o
- **Pac-Man**: Mec√¢nicas simples, alta replayability
- **Tetris**: Sistema de pontua√ß√£o progressivo
- **Space Invaders**: Padr√µes de inimigos
- **Donkey Kong**: Plataformas e obst√°culos
- **Pong**: F√≠sica simples mas envolvente

### Recursos Adicionais
- Sempre consulte a pasta `examples/` para boas pr√°ticas
- Leia o `README.md` para documenta√ß√£o completa
- Use o Pyxel Editor para criar assets
- Teste em diferentes resolu√ß√µes
- Colete feedback de jogadores

## üéØ Filosofia de Design

### Princ√≠pios Fundamentais
1. **"Easy to Learn, Hard to Master"**: Mec√¢nicas simples com profundidade
2. **"Juice"**: Feedback visual e sonoro satisfat√≥rio
3. **"One More Game"**: Viciante mas n√£o frustrante
4. **"Retro Feel"**: Aproveite as limita√ß√µes como vantagem
5. **"Polish"**: Detalhes fazem a diferen√ßa

### Mentalidade de Desenvolvimento
- **Itera√ß√£o R√°pida**: Prototipe, teste, refine
- **Foco no Core Loop**: Mec√¢nica principal deve ser divertida
- **Limita√ß√µes Criativas**: Use as restri√ß√µes do Pyxel como inspira√ß√£o
- **Comunidade**: Compartilhe e aprenda com outros desenvolvedores

---

**Lembre-se**: O melhor jogo √© aquele que voc√™ consegue terminar e que as pessoas querem jogar novamente. Foque na divers√£o e na experi√™ncia do jogador acima de tudo!
description:
globs:
alwaysApply: false
---